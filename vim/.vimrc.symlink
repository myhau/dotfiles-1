syntax on
set synmaxcol=2048

"Vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

"Add own bundles here
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'git://github.com/msanders/snipmate.vim.git'
Bundle 'vim-scripts/Rainbow-Parenthsis-Bundle'
Bundle 'vim-scripts/repeat.vim.git'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'juvenn/mustache.vim.git'
Bundle 'altercation/vim-colors-solarized'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-markdown'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'connrs/vim-javascript'
Bundle 'PDV--phpDocumentor-for-Vim'
Bundle 'vim-scripts/matchit.zip.git'
Bundle 'PHP-correct-Indenting'
Bundle 'cespare/vim-bclose'
"Bundle 'guns/jellyx.vim'
"Bundle 'vim-scripts/Lucius'
Bundle 'phpunit'
"Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rails'
"Bundle 'hallettj/jslint.vim.git'
Bundle 'phpcodesniffer.vim'
Bundle 'majutsushi/tagbar'
Bundle 'vim-scripts/wombat256.vim.git'
Bundle 'jiangmiao/auto-pairs'

filetype plugin indent on
"/Vundle

set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab
inoremap <S-Tab> <C-V><Tab>

set t_Co=256
colorscheme wombat256mod

set mouse=a
set autoindent
set cmdheight=2
set ruler
set nu
set guioptions-=T

" Toggling Paste Mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

"File Encoding
if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    setglobal fileencoding=utf-8
    set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible
set cursorline
set ttyfast
set ruler
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set laststatus=2
set backspace=indent,eol,start
let mapleader=","

"Temp Files
"==========
set undofile
set undodir=~/.vim.undo
set dir=~/.vim.swap//,/var/tmp//,/tmp//,.

"Search
"======
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
" The leader defaults to backslash, so (by default) this
" maps \* and \g* (see :help Leader).
" These work like * and g*, but do not move the cursor and always set hls.
map <Leader>* :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<C-M>
map <Leader>g* :let @/ = expand('<cword>')\|set hlsearch<C-M>
" Clear hlsearch
nnoremap <leader><space> :noh<cr>

"Folding
"=======
set foldmethod=indent
set nofoldenable

nnoremap <tab> %
vnoremap <tab> %
set list
set listchars=tab:»\ ,eol:¶

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

inoremap <C-\> <C-O>O

"vim-bclose
"==========

nmap <C-W>! <Plug>Kwbd

"PDV
"=======
inoremap <C-P> <ESC>:call PhpDocSingle()<CR>i
nnoremap <C-P> :call PhpDocSingle()<CR>
vnoremap <C-P> :call PhpDocRange()<CR>
au FileType * let g:pdv_cfg_Author = "Paul Connolley {connrs} <paul.connolley@gmail.com>"
au FileType * let g:pdv_cfg_Copyright = ""
au FileType * let g:pdv_cfg_License = "WTFPL"
au FileType * let g:pdf_cfg_php4always = 0

"jcommenter
"==========
"au FileType * let b:jcommenter_class_author="Paul Connolley [connrs] <paul.connolley@gmail.com>"
"au FileType * let b:jcommenter_file_author="Paul Connolley [connrs] <paul.connolley@gmail.com>"
"au FileType * map <M-c> :call JCommentWriter()<cr>

"NERDTree
"========
nmap <leader>NT :NERDTree<cr>

"Tagbar
"======
nmap <F8> :TagbarToggle<CR>

nmap<silent> <F2> :call NumberToggle()<CR>

function! NumberToggle()
    if exists("&rnu")
        if&number
            setlocal relativenumber
        else
            if&relativenumber
                setlocal norelativenumber
            else
                setlocal number
            endif
        endif
    else
        if&number
            setlocal nonumber
        else
            setlocal number
        endif
    endif
endfunction

" Remember buffer window position when switching
if v:version >= 700
    au BufLeave * let b:winview = winsaveview()
    au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif

" Don't mess the window position when using a mouse
augroup NO_CURSOR_MOVE_ON_FOCUS
  au!
  au FocusLost * let g:oldmouse=&mouse | set mouse=
  au FocusGained * if exists('g:oldmouse') | let &mouse=g:oldmouse | unlet g:oldmouse | endif
augroup END

set cpoptions+=ces$

function! s:Rgb2xterm(color)
   let best_match=0
   let smallest_distance = 10000000000
   let r = eval('0x'.a:color[1].a:color[2])
   let g = eval('0x'.a:color[3].a:color[4])
   let b = eval('0x'.a:color[5].a:color[6])
   for c in range(0,254)
      let d = s:pow(s:colortable[c][0]-r,2) + s:pow(s:colortable[c][1]-g,2) + s:pow(s:colortable[c][2]-b,2)
      if d<smallest_distance
      let smallest_distance = d
      let best_match = c
      endif
   endfor
   return best_match
endfunction
